# Configuration for mapping Tableau TWB XML elements to Power BI TMDL/Report objects

# --- Output Settings ---
Output:
  intermediate_dir: extracted  # Directory for storing intermediate JSON files
  validate_intermediate: false     # Whether to validate intermediate files

# --- API Settings ---
api_settings:
  # Base URL for the FastAPI service
  base_url: "http://localhost:8000"
  # Timeout in seconds for API requests
  timeout_seconds: 30
  # Endpoints
  endpoints:
    tableau_to_dax: "/convert/tableau-to-dax"
    tableau_to_m: "/convert/tableau-to-m-code"
    # Add more endpoints as needed

# --- Template Mappings ---
Templates:
  base_dir: templates
  mappings:
    # --- Project Files ---
    version:
      template: Version.txt
      output: Version.txt
      config: PowerBiVersion
      dataclass: PowerBiVersion

    pbixproj:
      template: pbixproj.json
      output: .pbixproj.json
      config: PowerBiProject
      dataclass: PowerBiProject
    # --- Model Files ---
    model:
      template: model.tmdl
      output: Model/model.tmdl
      config: PowerBiModel
      dataclass: PowerBiModel
    database:
      template: database.tmdl
      output: Model/database.tmdl
      config: PowerBiDatabase
      dataclass: PowerBiDatabase
    expressions:
      template: expressions.tmdl
      output: Model/expressions.tmdl
      config: PowerBiExpressions
      dataclass: PowerBiExpressions
    table:
      template: Table.tmdl
      output: Model/tables/{{source_name}}.tmdl
      config: PowerBiTable
      dataclass: PowerBiTable
      multiple: true
      name_from: source_name
    relationship:
      template: relationship.tmdl
      output: Model/relationships.tmdl
      config: PowerBiRelationship
      dataclass: PowerBiRelationship
      multiple: true
      name_from: id
    culture:
      template: culture.tmdl
      output: Model/cultures/{{culture}}.tmdl
      config: PowerBiCulture
      dataclass: CultureInfo
      multiple: true
      name_from: culture

    # --- Report Files ---
    report_config:
      template: report.config.json
      output: Report/config.json
      config: PowerBiReportConfig
      dataclass: PowerBiReportConfig
    report_metadata:
      template: report.metadata.json
      output: Report/metadata.json
      config: PowerBiReportMetadata
      dataclass: PowerBiReportMetadata
    report_settings:
      template: report.settings.json
      output: Report/settings.json
      config: PowerBiReportSettings
      dataclass: PowerBiReportSettings
    diagram_layout:
      template: diagram.layout.json
      output: Report/layout.json
      config: PowerBiDiagramLayout
      dataclass: PowerBiDiagramLayout
    report:
      template: report.json
      output: Report/report.json
      config: PowerBiReport
      dataclass: PowerBiReport
    report_section:
      template: report.section.json
      output: Report/sections/{{name}}.json
      config: PowerBiReportSection
      dataclass: PowerBiReportSection
      multiple: true
      name_from: name

# --- Model Settings ---
PowerBiModel:
  source_xpath: //workbook
  model_name:
    source_xpath: ./@name
    default: Model
  culture:
    source_xpath: .//preferences/preference[@name="locale"]/@value
    default: en-US
  data_access:
    legacy_redirects: true  # Static value
    return_null_errors: true  # Static value
  query_order:
    source_xpath: //relation[@type="table"]/@name
    format: json_list  # Will be formatted as ["table1", "table2", ...]
  time_intelligence:
    source_xpath: //column[@role="dimension"][@datatype="date"]
    format: boolean  # 1 if exists, 0 if not
  annotations:
    source_xpath: .//annotations
    format: json  # Will be parsed as JSON

# --- Table Settings ---
PowerBiTable:
  # Target datasource elements that have actual connections
  source_xpath: |
    //datasources/datasource[
      @inline='true' and
      not(@name='Parameters') and
      not(@hasconnection='false') and
      .//connection[@class and @class!='tableau']
    ]
  source_name:
    # 'caption' is often the user-friendly name
    source_attribute: caption
    fallback_attribute: name # Fallback to internal name if caption is missing
  description:
    source_attribute: caption
    default: null
  is_hidden:
    source_attribute: hidden
    default: false

  # Connection configuration
  connection_config:
    # Primary connection types
    primary_xpath: "connection[@class!='tableau']"
    named_connection_xpath: "connection/named-connections/named-connection/connection"
    # Connection class mapping
    class_mapping:
      federated: "named-connection"
      dremio: "dremio"
      oracle: "oracle"
      sqlserver: "sqlserver"
      excel: "excel-direct"

  # Relation configuration to find actual tables within datasources
  relation_config:
    # Find relations within connections in datasources, handling both legacy and new formats
    source_xpath: |
      connection/relation[@type='table' or @type='text'] |
      connection/_.fcp.ObjectModelEncapsulateLegacy.false...relation[@type='table' or @type='text' or @type='join'] |
      relation[@type='table' or @type='text']
    table_name:
      source_attribute: name
      optional: true
    table_type:
      source_attribute: type
      optional: true
    connection_id:
      source_xpath: "../@name"
      optional: true
    sql_query:
      # For text type relations that contain SQL queries
      source_xpath: "text()"
      optional: true
    # Handle join relations
    join_config:
      source_xpath: "clause[@type='join']/expression[@op='=']"
      left_table_xpath: "expression[1]/text()"
      right_table_xpath: "expression[2]/text()"

  # Columns configuration
  columns_config:
    # Target metadata-records for logical columns
    source_xpath: ".//metadata-records/metadata-record[@class='column']"
    # Target standalone calculated fields directly under datasource
    calculated_fields_xpath: "column[calculation]"
    # Additional XPaths for finding columns in relation elements
    relation_column_paths:
      - ".//_.fcp.ObjectModelEncapsulateLegacy.false...relation//column"
      - ".//_.fcp.ObjectModelEncapsulateLegacy.true...relation//column"
      - ".//relation//column"
    # Attribute mappings for relation columns
    relation_column_mappings:
      name_attribute: "name"
      datatype_attribute: "datatype"
      ordinal_attribute: "ordinal"
    # Attribute mappings for calculated fields
    calculated_field_mappings:
      name_attribute: "caption"
      datatype_attribute: "datatype"
      description_attribute: "caption"
    name:
      source_attribute: caption
      fallback_attribute: local-name
      format: identifier
    datatype:
      source_attribute: local-type
      mapping: tableau_datatype_to_tmdl
    format_string:
      source_attribute: format
      optional: true
    summarize_by:
      source_xpath: "aggregation/text()"
      optional: true
    description:
      source_attribute: caption
      optional: true
    is_hidden:
      source_attribute: hidden
      format: boolean
      default: false
    role:
      source_attribute: role
      optional: true
    calculation_formula:
      source_xpath: "calculation/@formula"
      optional: true

# --- Culture Settings ---
PowerBiCulture:
  source_xpath: //workbook
  locale:
    source_xpath: .//preferences/preference[@name="locale"]
    source_attribute: value
    default: en-US
  entities:
    tables:
      source_xpath: .//relation[@type="table"] | .//metadata-record[@class="column"]/../../..
      name_attribute: caption
      fallback_attribute: name
      binding_template:
        State: Generated
        Terms:
          - State: Generated
    columns:
      source_xpath: .//relation[@type="table"]//column | .//metadata-record[@class="column"]
      name_attribute: local-name
      fallback_attribute: remote-name
      parent_ref: parent-name  # How to find parent table name
      binding_template:
        State: Generated
        Hidden: true
        Terms:
          - State: Generated

# --- Relationship Settings ---
PowerBiRelationship:
  # Maps from <relation type='join'> elements, including both legacy and non-legacy formats
  source_xpath: //datasources/datasource/_.fcp.ObjectModelEncapsulateLegacy.false...relation[@type='join'] | //datasources/datasource/_.fcp.ObjectModelEncapsulateLegacy.true...relation[@type='join'] | //datasources/datasource/relation[@type='join']
  context_note: "Requires parsing join clause expressions."
  from_table:
    # Extract from join clause expressions
    source_xpath: .//clause[@type='join']/expression[@op='=']/expression[1]/@op
    transformation: extract_table_name
    format: identifier
  to_table:
    source_xpath: .//clause[@type='join']/expression[@op='=']/expression[2]/@op
    transformation: extract_table_name
    format: identifier
  from_column:
    source_xpath: .//clause[@type='join']/expression[@op='=']/expression[1]/@op
    transformation: extract_column_name
    format: identifier
  to_column:
    source_xpath: .//clause[@type='join']/expression[@op='=']/expression[2]/@op
    transformation: extract_column_name
    format: identifier
  is_active:
    source_xpath: ./@active
    format: boolean
    default: true
  cardinality:
    source_xpath: ./@join
    transformation: map_join_to_cardinality
    default: manyToOne
  cross_filter_behavior:
    source_xpath: ./@crossfilter
    default: oneWay # Power BI 'Single direction'

# --- Type Mappings ---
tableau_datatype_to_tmdl:
  string: string
  integer: int64
  real: double
  datetime: dateTime
  boolean: boolean
  array: string
  bstr: string
  byref: string
  bytes: string
  cy: string
  empty: string
  error: string
  guid: string
  hchapter: string
  idispatch: string
  iunknown: string
  null: string
  propvariant: string
  reserved: string
  str: string
  udt: string
  ui1: string
  ui2: string
  ui4: string
  ui8: string
  variant: string
  vector: string
  wdc_geometry: string
  wdc_string: string
  wstr: string
  bool: boolean
  wdc_bool: boolean
  date: datetime
  dbdate: datetime
  dbtime: datetime
  dbtimestamp: datetime
  filetime: datetime
  wdc_date: datetime
  wdc_datetime: datetime
  decimal: decimal
  numeric: decimal
  varnumeric: decimal
  r4: decimal
  r8: decimal
  wdc_float: decimal
  i1: int64
  i2: int64
  i4: int64
  i8: int64
  wdc_int: int64
  time_intelligence:
    source_xpath: .//column[@role="dimension"][@datatype="date"]
    mapping_rule: has_elements  # If any elements found, set to "1", else "0"
  version:
    source_xpath: .//preferences/preference[@name="version"]
    source_attribute: value
    default: "2.120.7013.10 (Main)"
  query_order:
    source_xpath: //relation[@type="join"]
    table_refs:
      - ./connection/relation[@name]  # Left table
      - ./connection/relation[@name]  # Right table
    fallback: table_list  # If no joins found, use alphabetical list of tables


# --- Metadata & Lookups ---
# These provide reusable mappings for specific transformations


tableau_role_to_summarize_by:
  # If role is 'measure' and datatype is numeric, default summarizeBy could be 'sum'
  # Otherwise, default is typically 'none' in TMDL unless specified.
  # This mapping might be handled in code logic rather than a direct lookup.
  # Example placeholder (logic likely more complex):
  measure_numeric: sum
  default: none

tableau_semantic_role_to_datacategory:
  # Based on values like '[Geo].[Latitude]' etc. Needs parsing.
  "[Geo].[City]": City
  "[Geo].[Country/Region]": Country
  "[Geo].[County]": County
  "[Geo].[Latitude]": Latitude
  "[Geo].[Longitude]": Longitude
  "[Geo].[Postal Code]": PostalCode
  "[Geo].[State/Province]": StateOrProvince
  "[Url].[Url]": WebUrl # Example, adjust based on actual Tableau values
  # Add other relevant semantic roles

tableau_viz_type_to_pbi:
  text-table: matrix
  discrete-bar: barChart # Or stackedBarChart, clusteredBarChart depending on layout
  continuous-line: lineChart
  pie-chart: pieChart
  crosstab: matrix
  map: map # Basic map, filled map needs more inspection
  # Add many more... Needs comprehensive list
  default: table # Fallback for unsupported types

# --- Mapping Definitions for Dataclasses ---

PowerBiDatabase:
  source_xpath: //workbook
  name:
    source_xpath: .//datasources/datasource/@caption
    alternative_xpath: .//datasources/datasource/@name
    default: Model

PowerBiColumn:
  # Find columns defined within datasources OR referenced within worksheets/shelves if not in DS metadata
  source_xpath: //datasources/datasource/column[@name] | //datasources/datasource/calculated-field[@name]
  context_note: "Needs logic to handle calculated fields potentially mapping to Measures instead."
  pbi_name:
    source_attribute: name
    mapping_function: sanitize_identifier # Remove brackets [], handle special chars
  pbi_datatype:
    source_attribute: datatype
    lookup: tableau_datatype_to_tmdl # Use lookup table above
    default: string
  source_name:
    source_attribute: name # Original name with brackets etc.
  description:
    source_attribute: caption
    alternative_xpath: desc # Check for child <desc> element
    default: null
  format_string:
    # Complex: Needs to find associated style-rules or format attributes
    source_xpath: # Example XPaths (likely need refinement)
      - ./style-rule/format[@attr='text-format']
      - ./_.fcp.FormatAttribute... # Check for specific format attributes
    mapping_function: map_tableau_format # Python function to convert Tableau format codes
    default: null
  is_hidden:
    source_attribute: hidden
    mapping_function: to_boolean # Convert 'true'/'false' string
    default: false
  source_column:
    source_attribute: name # Default to source_name, logic might override if renamed
  summarize_by:
    # Rule: Check 'role' and 'datatype'. If role='measure' & numeric type -> 'sum', else 'none'.
    derived_rule: determine_summarize_by
    source_attribute_role: role
    source_attribute_datatype: datatype
  sortByColumnName:
    # Complex: Look for specific Tableau metadata elements related to sorting
    source_xpath: .//_.fcp.SortSpecAttribute... # Placeholder for actual path
    mapping_function: extract_sort_column
    default: null
  dataCategory:
    source_attribute: semantic-role
    lookup: tableau_semantic_role_to_datacategory
    mapping_function: parse_semantic_role # Extract key like '[Geo].[City]'
    default: null
  annotations: # Derived during processing
    SummarizationSetBy:
      derived_rule: derive_summarization_set_by # Based on summarize_by value
    PBI_FormatHint:
      derived_rule: derive_pbi_format_hint # Based on format_string and potentially global locale setting

PowerBiMeasure:
  # Typically maps from <column role='measure' calculation='...'> or <calculated-field>
  source_xpath: //datasources/datasource/column[@role='measure' and @calculation] | //datasources/datasource/calculated-field
  context_note: "Requires filter to ensure it's used as an aggregation."
  pbi_name:
    source_attribute: name
    mapping_function: sanitize_identifier
  dax_expression:
    ai_translation_source: calculation # Attribute containing Tableau formula string
    context_required: # Information needed by the AI prompt builder
      - referenced_field_names # List of fields used in the formula
      - data_model_context # Mapped PBI names and datatypes of referenced fields
  source_name:
    source_attribute: name
  description:
    source_attribute: caption
    alternative_xpath: desc
    default: null
  format_string:
    # Similar complex lookup as PowerBiColumn format_string
    mapping_function: map_tableau_format
    default: null
  is_hidden:
    source_attribute: hidden
    mapping_function: to_boolean
    default: false
  display_folder:
    source_attribute: group # From calculated-field element
    default: null
  annotations: # Derived
    PBI_FormatHint:
      derived_rule: derive_pbi_format_hint

PowerBiHierarchy:
  # Find columns that are part of a hierarchy
  source_xpath: //datasources/datasource/column[@hierarchy]
  name:
    source_attribute: hierarchy
  levels:
    derived_rule: find_hierarchy_levels # Logic to group columns by 'hierarchy' attribute
    level_name_attribute: name # Use column name as level name
    level_column_attribute: name # Reference the column itself

PowerBiPartition: # Definition within PowerBiTable mapping applies
  m_code_generation:
    api:
      base_url: "http://localhost:8000"
      timeout_seconds: 30
      endpoints:
        m_code: "/convert/tableau-to-m-code"
    
    connection_types:
      federated:
        xpath:
          named_connection: ".//named-connection"
          connection: ".//connection"
        fallback_template: |
          let
              Source = Sql.Database("{server}", "{database}"),
              Query = "{sql_query}",
              Output = Value.NativeQuery(Source, Query)
          in
              Output
      
      dremio:
        fallback_template: |
          let
              Source = Odbc.DataSource("DREMIO"),
              Query = "{sql_query}",
              Output = Value.NativeQuery(Source, Query)
          in
              Output
      
      oracle:
        fallback_template: |
          let
              Source = Oracle.Database("{server}", "{database}"),
              Query = "{sql_query}",
              Output = Value.NativeQuery(Source, Query)
          in
              Output

      excel-direct:
        xpath:
          connection: ".//connection[@class='excel-direct']"
        fallback_template: |
          let
              Source = Excel.Workbook(File.Contents("{filename}"), null, true),
              {table}_Table = Source{[Item="{table}", Kind="Sheet"]},
              #"Promoted Headers" = Table.PromoteHeaders({table}_Table, [PromoteAllScalars=true])
          in
              #"Promoted Headers"
    
    connection_info_mapping:
      standard_fields:
        server: "server"
        database: "dbname"
        schema: "schema"
        table: ["table", "name"]
        sql_query: "text()"
      
      computed_fields:
        sql_query:
          condition: "relation_node.text is not None and relation_node.get('type') == 'text'"
          value: "relation_node.text.strip()"
    
    formatting:
      html_unescape:
        enabled: true
        entities:
          - {"&#13;": "\n"}
          - {"&apos;": "'"}
      indentation:
        base: 1
    
    error_handling:
      log_errors: true
      fallback_strategy: "template"
      fallback_conditions:
        dremio: ["class_type == 'dremio' or 'dremio' in conn_info['additional_properties'].get('class', '')"]
        oracle: ["class_type == 'oracle' or 'oracle' in conn_info['additional_properties'].get('class', '')"]
        federated: ["class_type == 'federated'"]
  
  name:
    source_attribute: name # From the relation element
    template: "{schema}_{table}" # Template for partition name
  source_type:
    default: m
  m_code_generation:
    api:
      base_url: "${TABLEAU_TO_DAX_API_URL}" # Environment variable
      timeout_seconds: 30
      endpoints:
        m_code: "/convert/tableau-to-m-code"
    
    # Connection type configurations
    connection_types:
      sqlserver:
        class_type: "sqlserver"
        required_attributes: [server, database, table]
        optional_attributes: [schema]
        fallback_template: |
          let
              Source = Sql.Database("{server}", "{database}"),
              {schema}_{table} = Source{[Schema="{schema}",Item="{table}"]}
          in
              {schema}_{table}
      
      excel:
        class_type: "excel-direct"
        xpath:
          connection: ".//named-connection//connection[@class='excel-direct']"
        required_attributes: [filename]
        optional_attributes: [sheet]
        fallback_template: |
          let
              Source = Excel.Workbook(File.Contents("{filename}")),
              {table} = Source{[Item="{table}"]}[Data]
          in
              {table}
      
      federated:
        class_type: "federated"
        xpath:
          named_connection: ".//named-connection"
    
    # Connection info mapping
    connection_info_mapping:
      standard_fields:
        class_type: class
        server: server
        database: dbname
        schema: schema
        table: [table, name] # Try table first, then name
        filename: filename
      computed_fields:
        sql_query:
          condition: "relation_node.get('type') == 'text'"
          value: "relation_node.text"
    
    # M code formatting
    formatting:
      indentation:
        base: 1
        let_statement: 1
        in_statement: 4
        content: 5
      html_unescape:
        enabled: true
        entities:
          - "&quot;": '"'
          - "&amp;": "&"
          - "&lt;": "<"
          - "&gt;": ">"
          - "&#x27;": "'"
    
    # Error handling
    error_handling:
      log_errors: true
      fallback_strategy: "template" # Options: template, empty, error
      fallback_conditions:
        sqlserver:
          - "conn_info['class_type'] == 'sqlserver'"
          - "conn_info['server']"
          - "conn_info['database']"
          - "conn_info['table']"
    
    # LLM Integration
    llm:
      enabled: true
      prompt_template: |
        Generate Power BI M code for the following Tableau connection:
        Connection Type: {class_type}
        {connection_details}
        
        Rules:
        1. Use only valid Power BI M code syntax
        2. Include proper error handling where appropriate
        3. Follow Power BI best practices for data source connections
        4. Return only the M code, no explanations
        5. Use proper variable names and formatting
        6. For Excel files, use Excel.Workbook and specify the table name in Item
        7. For federated connections to Excel, use the Excel.Workbook function
      
      context_attributes:
        - class_type
        - server
        - database
        - schema
        - table
        - sql_query
        - filename
        - connection_type
  
  expression: # M Code
    derived_rule: generate_m_code # Complex function using connection/relation info
    source_connection_xpath: ../connection
    source_relation_details: self # The relation element itself

# --- Report Object Mappings (Targeting report.json) ---

PowerBiReportPage:
  source_xpath: //dashboards/dashboard
  name:
    source_attribute: name
    mapping_function: sanitize_identifier
    default_prefix: "Page "
  # width, height, display_option might need parsing from <size> elements or use defaults

PowerBiVisual:
  # Maps from <zone> elements within dashboards that reference worksheets (<view>)
  source_xpath: //dashboards/dashboard/zones/zone[@type='view']
  context_note: "Requires finding the referenced worksheet definition."
  worksheet_ref_attribute: name # Attribute linking zone to worksheet name
  worksheet_xpath: "//worksheets/worksheet[@name='{ref_name}']" # Format string to find worksheet
  pbi_type:
    source_xpath_relative_to_worksheet: . # Check attributes/structure of worksheet
    mapping_function: determine_viz_type # Complex logic analyzing shelves/marks
    lookup: tableau_viz_type_to_pbi # Use lookup table
    default: table
  title:
    source_xpath_relative_to_worksheet: .//title/formatted-text/run
    alternative_attribute: name # Fallback to worksheet name
  source_name:
    source_attribute_relative_to_worksheet: name
  field_mappings:
    derived_rule: map_visual_shelves # Function to process <rows>, <cols>, <color>, etc.
    source_shelves_xpath: # XPaths relative to the worksheet element
      - ./table/view/rows
      - ./table/view/cols
      - ./table/view/mark/color
      - ./table/view/mark/size
      - ./table/view/mark/tooltip
      # etc.
    target_roles: # Map Tableau shelves to PBI roles (highly viz-type dependent)
      rows: Axis # Example, varies greatly
      cols: Values # Example, varies greatly
      color: Legend # Example, varies greatly
      tooltip: Tooltips # Example, varies greatly

# --- Helper Function References (Python code needs to implement these) ---
# sanitize_identifier(name)
# to_boolean(value)
# map_tableau_format(format_code)
# determine_summarize_by(role, datatype)
# extract_sort_column(sort_spec_node)
# parse_semantic_role(role_string)
# derive_summarization_set_by(summarize_by_value)
# derive_pbi_format_hint(format_string, global_locale)
# get_join_table_name(join_relation_node, side) # side='from' or 'to'
# get_join_column_name(join_relation_node, side)
# infer_cardinality(join_info)
# find_hierarchy_levels(hierarchy_name, all_columns)
# generate_m_partition(connection_node, relation_node) -> returns PowerBiPartition object
# generate_m_code(connection_node, relation_node) -> returns M code string
# determine_viz_type(worksheet_node) -> returns Tableau viz type string
# map_visual_shelves(worksheet_node, pbi_viz_type) -> returns list of PowerBiVisualFieldMapping